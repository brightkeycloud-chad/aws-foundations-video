AWSTemplateFormatVersion: '2010-09-09'
Description: 'Demo: Deploy an EC2 instance with Amazon Linux 2023, SSM Session Manager access, and security group using AWS CLI'

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type



Resources:
  # IAM Role for EC2 Instance (SSM Session Manager)
  EC2SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: Demo-EC2-SSM-Role

  # Instance Profile for EC2 Instance
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2SSMRole

  # Security Group
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access (SSH via SSM Session Manager)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Demo-WebServer-SG

  # EC2 Instance
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Enable logging
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          echo "Starting user-data script execution"
          
          # Update system and install Apache
          dnf update -y
          dnf install -y httpd
          systemctl start httpd
          systemctl enable httpd
          
          # Get IMDSv2 token for metadata access
          echo "Obtaining IMDSv2 token..."
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" -s)
          
          if [ -z "$TOKEN" ]; then
            echo "Failed to obtain IMDSv2 token, trying IMDSv1 fallback..."
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null || echo "Unable to retrieve")
            AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null || echo "Unable to retrieve")
            INSTANCE_TYPE=$(curl -s http://169.254.169.254/latest/meta-data/instance-type 2>/dev/null || echo "Unable to retrieve")
          else
            echo "Successfully obtained IMDSv2 token, retrieving metadata..."
            INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null || echo "Unable to retrieve")
            AZ=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null || echo "Unable to retrieve")
            INSTANCE_TYPE=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-type 2>/dev/null || echo "Unable to retrieve")
          fi
          
          # Create web page with metadata
          echo "Creating web page..."
          cat > /var/www/html/index.html << EOF
          <html>
          <head><title>CloudFormation Demo</title></head>
          <body>
          <h1>Hello from CloudFormation Demo!</h1>
          <p><strong>Instance ID:</strong> $INSTANCE_ID</p>
          <p><strong>Availability Zone:</strong> $AZ</p>
          <p><strong>Instance Type:</strong> $INSTANCE_TYPE</p>
          <p><strong>Operating System:</strong> Amazon Linux 2023</p>
          <p><strong>Last Updated:</strong> $(date)</p>
          <hr>
          <p><em>This page was generated by CloudFormation UserData script</em></p>
          </body>
          </html>
          EOF
          
          # Set proper permissions
          chown apache:apache /var/www/html/index.html
          chmod 644 /var/www/html/index.html
          
          echo "User-data script execution completed"
      Tags:
        - Key: Name
          Value: Demo-WebServer

Outputs:
  InstanceId:
    Description: Instance ID of the newly created EC2 instance
    Value: !Ref WebServerInstance
    Export:
      Name: !Sub ${AWS::StackName}-InstanceId

  PublicDNS:
    Description: Public DNS name of the newly created EC2 instance
    Value: !GetAtt WebServerInstance.PublicDnsName
    Export:
      Name: !Sub ${AWS::StackName}-PublicDNS

  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt WebServerInstance.PublicIp
    Export:
      Name: !Sub ${AWS::StackName}-PublicIP

  WebsiteURL:
    Description: URL for the web server
    Value: !Sub 'http://${WebServerInstance.PublicDnsName}'
    Export:
      Name: !Sub ${AWS::StackName}-WebsiteURL

  IAMRole:
    Description: IAM Role for SSM Session Manager access
    Value: !Ref EC2SSMRole
    Export:
      Name: !Sub ${AWS::StackName}-IAMRole

  SSMSessionCommand:
    Description: Command to connect via SSM Session Manager
    Value: !Sub 'aws ssm start-session --target ${WebServerInstance}'
    Export:
      Name: !Sub ${AWS::StackName}-SSMCommand
